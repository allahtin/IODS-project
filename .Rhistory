rats$Group <- factor(rats$Group)
str(rats)
###TAsk 3. Converting datasets to a long form.
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
###TAsk 3. Converting datasets to a long form.
library(dplyr)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
library(tidyr)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
View(BPRSL)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
View(BPRSL)
View(BPRS)
View(rats)
ratsL <-  rats %>% gather(key =WD, value = rats, -ID, -Group)
View(ratsL)
ratsL <-  ratsL %>% mutate(WD = as.integer(substr(WD,5,5)))
View(ratsL)
ratsL <-  rats %>% gather(key =WD, value = rats, -ID, -Group)
View(ratsL)
ratsL <-  ratsL %>% mutate(Time = as.integer(substr(WD,5,5)))
View(ratsL)
?substr
ratsL <-  ratsL %>% mutate(Time = as.integer(substr(WD,3,3)))
View(ratsL)
ratsL <-  ratsL %>% mutate(Time = as.integer(substr(WD,3,4)))
View(ratsL)
glimpse(BPRSL)
glimpse(rats)
glimpse(ratsL)
###Task 4. checking both datasets - long and short form.
dim(BTRS)
###Task 4. checking both datasets - long and short form.
dim(BPRS)
View(BPRS)
View(BPRSL)
str(BPRS)
names(PBRS)
names(BPRS)
dim(BPRSL)
str(BPRSL)
names(BPRSL)
View(BPRSL)
#Now we check rats
dim(rats)
View(rats)
str(rats)
names(rats)
dim(ratsL)
names(ratsL)
View(ratsL)
str(ratsL)
library(dplyr)
library(tidyr)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep = "", header =T)
rats<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep = "", header =T)
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
rats$ID <- factor(rats$ID)
rats$Group <- factor(rats$Group)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
ratsL <-  rats %>% gather(key =WD, value = rats, -ID, -Group)
ratsL <-  ratsL %>% mutate(Time = as.integer(substr(WD,3,4)))
glimpse(BPRSL)
glimpse(ratsL)
head(BPRSL)
head(ratsL)
setwd("C:/Users/ELITEBOOK/Dropbox/Oslo")
install.packages('pheatmap')
install.packages('ConsensusClusterPlus')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ConsensusClusterPlus", version = "3.8")
## ----load, message=FALSE,warning=FALSE, results='hide'-------------------
# CRAN packages:
library(pheatmap)
library(cluster)
# Biconductor packages:
library(Biobase)
library(ConsensusClusterPlus)
# load the data (make sure that you are in the correct working directory with setwd()):
load("Gerstung2015.RData")
gset
dim(exprs(gset))
## ----descriptive, message=FALSE,warning=FALSE, results='hide'------------
# make boxplots of all samples to compare the distributions:
boxplot(exprs(gset), outline=F)
# only for the first 10 samples:
boxplot(exprs(gset)[,1:10], outline=F)
# Use the ggplot2 package to show overlaying density plots (only for the first 10 samples):
library(ggplot2)
library(reshape2)
tidydata <- melt(exprs(gset)[,1:10])
colnames(tidydata) <- c("feature", "sample", "value")
ggplot(tidydata, aes(x=value, fill=sample)) + geom_density(alpha=0.25)
?melt
## ----clinic--------------------------------------------------------------
dim(pData(gset))
# Save the `pData` in a `data.frame` called `clinic`.
clinic <- pData(gset)
# Which covariates are stored in the `pData` slot?
colnames(clinic)
## ----pca1, results='hide'------------------------------------------------
# apply the function to the transposed expression matrix t(exprs(gset)):
pca <- prcomp(t(exprs(gset)))
# look at the results:
summary(pca)
str(pca)
## ----scree---------------------------------------------------------------
# use the specific R function:
screeplot(pca, npcs = length(pca$sdev))
# this is nearly the same as the following:
plot(pca$sdev^2/sum(pca$sdev^2), type="h")
## ----scatter, fig.width=6, fig.height=6----------------------------------
# generate colors for SF3B1
col.SF3B1 <- rep("gray", length=ncol(gset))
col.SF3B1[clinic$SF3B1==1] <- "darkred"
# generate different point types for missing and non-missing data
pch.SF3B1 <- ifelse(is.na(clinic$SF3B1), 1, 19)
## ----echo=TRUE,results='hide',fig.height=5,fig.cap = 'Gerstung et al. (2015), Figure 1a: Pairwise Scatterplot',fig.pos='b!'----
# make pairwise scatterplot of principal components:
plot(x=pca$x[,1], y=pca$x[,2], col=col.SF3B1, pch=pch.SF3B1,
ylab="PC1", xlab="PC2", main="SF3B1")
## ----suppfig1------------------------------------------------------------
# load a library for creating new color palettes
library(RColorBrewer)
# Which covariates are stored in the `pData` slot?
colnames(clinic)
str(clinic)
## ----scree---------------------------------------------------------------
# use the specific R function:
screeplot(pca, npcs = length(pca$sdev))
# this is nearly the same as the following:
plot(pca$sdev^2/sum(pca$sdev^2), type="h")
col.SF3B1 <- rep("gray", length=ncol(gset))
col.SF3B1[clinic$SF3B1==1] <- "darkred"
# generate different point types for missing and non-missing data
pch.SF3B1 <- ifelse(is.na(clinic$SF3B1), 1, 19)
plot(x=pca$x[,1], y=pca$x[,2], col=col.SF3B1, pch=pch.SF3B1,
ylab="PC1", xlab="PC2", main="SF3B1")
## ----suppfig1------------------------------------------------------------
# load a library for creating new color palettes
library(RColorBrewer)
# specify a color palette
set1 = c(brewer.pal(9,"Set1"), brewer.pal(8, "Dark2"))
# make the actual scree plot
par(bty="n", mgp = c(2.5,.5,0), mar=c(3,4,1,2)+.1, tcl=-.25, las=1)
plot(pca$sdev^2/sum(pca$sdev^2), type="h", col=set1[1],
xlab="", ylab=expression(paste("Explained variance ", Rgenetics^2)),
ylim=c(0,0.15), yaxs="i")
mtext(side=1, "Principal component", line=2)
# calculate the cumulative explained variance
c <- cumsum(pca$sdev^2)/sum(pca$sdev^2)* pca$sdev[1]^2/sum(pca$sdev^2)
lines(c  , type="s")
axis(4, at = pretty(c(0,1))* pca$sdev[1]^2/sum(pca$sdev^2), labels=pretty(c(0,1)))
legend("bottomright", col=c(set1[1],"black"), lty=1, c("Per PC","Cumulative"), bty="n")
# make some additional lines to show in the plot how much of the explained variance is explained by the first 20 principal components:
lines(c(180,20,20),c(c[20],c[20],0), lty=3)
## ----filter, results="hide"----------------------------------------------
# for each gene, calculate the variance over all samples
vs <- apply(exprs(gset),1,var)
# order the genes by decreasing variance
oo <- order(vs,decreasing=TRUE)
# select the 1000 genes with the largest variances
gep <- exprs(gset)[oo[1:1000],]
## ----hc1, fig.cap = 'Euclidean Distance'---------------------------------
# calculate the Euclidean distances (note that the data need to be transposed again)
ed <- dist(t(gep))
# do the hierarchical clustering (with complete linkage)
ehc <- hclust(ed,method="complete")
# plot the resulting dendrogram
plot(ehc,labels=FALSE)
## ----hc2, fig.cap = 'Pearson Correlation'--------------------------------
# calculate the distance as 1-r (where r is the Pearson correlation)
dc <- as.dist(1-cor(gep))
chc <- hclust(dc,method="complete")
plot(chc,labels=FALSE)
## ----silhouette, fig.width=8, fig.height=8, dev='pdf'--------------------
# set up panel of 2x2 plots:
par(mfrow=c(2,2))
# plots for 2, 3, and 4 clusters:
plot(silhouette(cutree(ehc,2),ed))
plot(silhouette(cutree(ehc,3),ed))
plot(silhouette(cutree(ehc,4),ed))
# to demonstrate the principle, we can run the last command (for 5 clusters) in three separate commands:
ct <- cutree(ehc,5)
sh <- silhouette(ct,ed)
plot(sh)
## ----heatmap, fig.cap = 'Pretty Heatmap with Sample Annotation', warning=FALSE----
# generate an annotation data.frame to visualize the first four mutations
anno <- data.frame(clinic[,27:30])
rownames(anno) <- clinic$GEOID
# plot heatmap with sample annotation
pheatmap(gep, annotation=anno,clustering_method="complete",
drop_levels=TRUE,show_rownames=FALSE,
show_colnames=FALSE,legend=FALSE,
cutree_cols=2)
## ----consclust, results='hide'-------------------------------------------
# apply consensus clustering
ccres <- ConsensusClusterPlus(gep,
maxK=5,
reps=1000,
pItem=0.8, # size of the resampled data set
clusterAlg="hc",
distance="euclidean",
innerLinkage="complete",
seed=1218)
str(ccres)
setwd("C:/-=ALEXANDRA=-/projects/Gerstung")
setwd("C:/-=ALEXANDRA=-/projects/Gerstung/R")
library(dplyr)
library(tidyr)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep = "", header =T)
rats<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", sep = "", header =T)
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
rats$ID <- factor(rats$ID)
rats$Group <- factor(rats$Group)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
ratsL <-  rats %>% gather(key =WD, value = rats, -ID, -Group)
ratsL <-  ratsL %>% mutate(Time = as.integer(substr(WD,3,4)))
library(ggplot2)
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
View(BPRSL)
View(ratsL)
ggplot(ratsL, aes(x = Time, y = rats, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(ratsL$rats), max(ratsL$rats)))
ggplot(ratsL, aes(x = Time, y = rats, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(ratsL$rats), max(ratsL$rats)))
BPRSL <- BPRSL %>%
group_by(week) %>%
mutate(stdbprs = (bprs - mean(bprs))/sd(bprs) ) %>%
ungroup()
glimpse(BPRSL)
# Plot again with the standardised bprs
ggplot(BPRSL, aes(x = week, y = stdbprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
scale_y_continuous(name = "standardized bprs")
ratsL <- ratsL %>%
group_by(Time) %>%
mutate(stdrats = (rats - mean(rats))/sd(rats) ) %>%
ungroup()
glimpse(ratsL)
ggplot(ratsL, aes(x = Time, y = stdrats, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized rats")
n <- BPRSL$week %>% unique() %>% length()
BPRSS <- BPRSL %>%
group_by(treatment, week) %>%
summarise( mean = mean(bprs), se = sd(bprs)/sqrt(n) ) %>%
ungroup()
glimpse(BPRSS)
# Plot the mean profiles
ggplot(BPRSS, aes(x = week, y = mean, linetype = treatment, shape = treatment)) +
geom_line() +
scale_linetype_manual(values = c(1,2)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(bprs) +/- se(bprs)")
n <- ratsL$Time %>% unique() %>% length()
ratsS <- ratsL %>%
group_by(Group, Time) %>%
summarise( mean = mean(rats), se = sd(rats)/sqrt(n) ) %>%
ungroup()
glimpse(ratsS)
ggplot(ratsS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(rats) +/- se(rats)")
ggplot(ratsS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(rats) +/- se(rats)")
ggplot(ratsS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(rats) +/- se(rats)")
ggplot(ratsS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.5)) +
scale_y_continuous(name = "mean(rats) +/- se(rats)")
ggplot(ratsS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.9,0.5)) +
scale_y_continuous(name = "mean(rats) +/- se(rats)")
BPRSL8S <- BPRSL %>%
filter(week > 0) %>%
group_by(treatment, subject) %>%
summarise( mean=mean(bprs) ) %>%
ungroup()
# Glimpse the data
glimpse(BPRSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(BPRSL8S, aes(x = treatment, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(bprs), weeks 1-8")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
BPRSL8S1 <- BPRSL8S %>%
filter(mean < 60)
ratsL8S <- ratsL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(rats) ) %>%
ungroup()
glimpse(ratsL8S)
ggplot(ratsL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(rats), WD ALL")
ratsL8S1 <- ratsL8S %>%
filter(mean < 550)
View(ratsL8S1)
View(ratsL8S1)
ratsL8S2 <- ratsL8S1 %>%
filter(mean > 250)
ggplot(ratsL8S2, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(rats minus 2 outliers), WD ALL")
ggplot(ratsL8S2, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(rats minus 2 outliers), WD ALL")
t.test(mean ~ treatment, data = BPRSL8S1, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
BPRSL8S2 <- BPRSL8S %>%
mutate(baseline = BPRS$week0)
# Fit the linear model with the mean as the response
fit <- lm(mean ~ baseline + treatment, data = BPRSL8S2)
# Compute the analysis of variance table for the fitted model with anova()
anova(fit)
t.test(mean ~ Group, data = ratsL8S2, var.equal = TRUE)
ratsL8S2 <- ratsL8S %>%
mutate(baseline = rats$WD1)
View(ratsL8S2)
fit <- lm(mean ~ baseline + Group, data = ratsL8S2)
anova(fit)
View(rats)
View(ratsL)
View(ratsL)
View(ratsL)
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line()
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
summary(BPRS_reg)
library(lme4)
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
summary(BPRS_ref)
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
summary(BPRS_ref1)
anova(BPRS_ref1, BPRS_ref)
BPRS_ref2 <- lmer(bprs ~ week * treatment + (week | subject), data = BPRSL, REML = FALSE)
summary(BPRS_ref2)
anova(BPRS_ref2, BPRS_ref1)
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 2, 4,6,8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 4,8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = Group)) +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 4,8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 4,8)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0,8,2)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
Fitted <- fitted(BPRS_ref2)
BPRSL <- BPRSL %>%
mutate(Fitted)
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line(aes(linetype = Group)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 20)) +
scale_y_continuous(name = "Fitted weight (grams)") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (days)", breaks = seq(0, 60, 20)) +
scale_y_continuous(name = "Fitted weight (grams)") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 20)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 20)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
Fitted <- fitted(BPRS_ref2)
# Create a new column fitted to BPRSL
BPRSL <- BPRSL %>%
mutate(Fitted)
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 20)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 8, 2)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 8, 2)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref2)
# Create a new column fitted to BPRSL
BPRSL <- BPRSL %>%
mutate(Fitted)
# draw the plot of BPRSL with fitted value
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 8, 2)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 8, 2)) +
scale_y_continuous(name = "bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# Create a new column fitted to BPRSL
BPRSL <- BPRSL %>%
mutate(Fitted)
# draw the plot of BPRSL with fitted value
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line() +
scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 8, 2)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
